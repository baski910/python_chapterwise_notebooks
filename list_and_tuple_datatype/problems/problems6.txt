1. Given the month and year as numbers, return whether that month contains a Friday 13th.

Examples
has_friday_13(3, 2020) ➞ True

has_friday_13(10, 2017) ➞ True

has_friday_13(1, 1985) ➞ False


2. Given a name, return the letter with the highest index in alphabetical order, with its corresponding index, in the form of a string. You are prohibited to use max() nor is reassigning a value to the alphabet list allowed.

Examples
alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]


alphabet_index(alphabet, "Flavio") ➞ "22v"

alphabet_index(alphabet, "Andrey") ➞ "25y"

alphabet_index(alphabet, "Oscar") ➞ "19s"


3. Create a function that takes a list and string. The function should remove the letters in the string from the list, and return the list.

Examples
remove_letters(["s", "t", "r", "i", "n", "g", "w"], "string") ➞ ["w"]

remove_letters(["b", "b", "l", "l", "g", "n", "o", "a", "w"], "balloon") ➞ ["b", "g", "w"]

remove_letters(["d", "b", "t", "e", "a", "i"], "edabit") ➞ []


4. Given a string, reverse its order, change lowercase letters to uppercase and increment uppercase letters by one (e.g. A becomes B, C becomes D, Z becomes A).

Examples
change_string("ApPle") ➞ "ELQPB"

change_string("draGON") ➞ "OPHARD"

change_string("ZebrA") ➞ "BRBEA"



5. Given a list of numbers, create a function that removes 25% from every number in the list except the smallest number, and adds the total amount removed to the smallest number.

Examples
add_to_smallest([4, 1, 4]) ➞ [3, 3, 3]

add_to_smallest([16, 10, 8]) ➞ [12, 7.5, 14.5]

add_to_smallest([2, 100]) ➞ [27, 75]
Notes
There will only be one smallest number in a given list.

################################################### new set of problem statements #################################################

1. RGB is a color model that defines color by the combination of Red, Green, and Blue. An RGB tuple is composed of three numbers that specify the intensity of each color. Because it uses 8 bits (0s or 1s) for each color, each intensity can be transformed into a hexadecimal number with two digits at most.

There are 256 possible shades for each color, since "11111111" (or hex "ff") corresponds to decimal 255, plus the number 000. The combination of all 256 possible shades for the three primary colors gives 256 cubed, or over 16 million possible colors.

Write a function that takes a color in RGB or hex and returns the opposite. If it takes in the three integers in an RGB tuple, it should return a string with the equivalent hexadecimal notation, plus a hash sign (#) at the front. If it takes in a string in hex, it should return a tuple with the three integers corresponding to RGB.

Examples
rgb_or_hex(150, 50, 76) ➞ "#96324c"
# 150 is hex 96, 50 is hex 32 and 76 is hex 4c.

rgb_or_hex("#303749") ➞ (48, 55, 73)
# 30 is dec 48, 37 is dec 55 and 49 is dec 73.

rgb_or_hex(170, 14, 0) ➞ "#aa0e00"
# 170 is hex aa, 14 is hex e and 0 is hex 0.
Notes
Remember that all three colors should be two-digit hex numbers, so for Green value 14, the hex value should be 0e rather than just e.
Try using formatting or filling methods to minimize if statements.


2. Given a series of lists, with each individual list containing the time of the alarm set and the sleep duration, return what time to sleep.

Examples
bed_time(["07:50", "07:50"]) ➞ ["00:00"]
# The second argument means 7 hours, 50 minutes sleep duration.

bed_time(["06:15", "10:00"], ["08:00", "10:00"], ["09:30", "10:00"]) ➞ ["20:15", "22:00", "23:30"]
# The second argument of each sub list means 10 hours sleep duration.

bed_time(["05:45", "04:00"], ["07:10", "04:30"]) ➞ ["01:45", "02:40"]
# Sleep duration can be different among the lists.


3. Write a function that returns the largest even integer in a list with its corresponding index and the parity of that index, but determining the parity of that index is limited to not using the modulo operator %.

Output Structure:
You have to return a Dictionary.

{"@odd|even index " + index_of_largest: largest_integer}

bitwise_index([107, 19, 36, -18, -78, 24, 97]) ➞ {"@even index 2": 36}

bitwise_index([31, 7, 2, 13, 7, 9, 10, 13]) ➞ {"@even index 6": 10}

bitwise_index([4, 4, 4, 4, 4, 4]) ➞ {"@even index 0": 4}

bitwise_index([-31, -7, -13, -7, -9, -13]) ➞ "No even integer found!"


The use of index() and max() are restricted.
If there are no even integers, return "No even integer found!".



4. You are given two positive integers n and m. You have to perform some basic mathematical operations on n to obtain m. These are your options:

(n-1)/2   - if (n-1) is divisible by 2
n/2       - if n is divisible by 2
n*2
Create a function that returns the minimum number of steps required to transform n into m.

Examples
number_transform(2, 8) ➞ 2
// 2 * 2 = 4
// 4 * 2 = 8

number_transform(9, 2) ➞ 2
// (9-1) / 2 = 4
// 4 / 2 = 2

number_transform(1024, 1024) ➞ 0
Notes
m will always be a power of 2.


5. Create a function that takes a string and returns the reversed string. However there's a few rules to follow in order to make the challenge interesting:

The UPPERCASE/lowercase positions must be kept in the same order as the original string (see example #1 and #2).
Spaces must be kept in the same order as the original string (see example #3).
Examples
special_reverse_string("Edabit") ➞ "Tibade"

special_reverse_string("UPPER lower") ➞ "REWOL reppu"

special_reverse_string("1 23 456") ➞ "6 54 321"


6. Starting with either 3 or 5 and given these operations:

add 5
multiply by 3
You should say if it is possible to reach the target number n.

Examples
only_5_and_3(14) ➞ True
# 14 = 3*3 + 5

only_5_and_3(25) ➞ True
# 25 = 5+5+5+5+5

only_5_and_3(7) ➞ False
# There exists no path to the target number 7



7. Create a function which converts an ordered number list into a list of ranges (represented as strings). Note how some lists have some numbers missing.

Examples
numbers_to_ranges([1, 2, 3, 4, 5]) ➞ ["1-5"]

numbers_to_ranges([3, 4, 5, 10, 11, 12]) ➞ ["3-5", "10-12"]

numbers_to_ranges([1, 2, 3, 4, 99, 100]) ➞ ["1-4", "99-100"]

numbers_to_ranges([1, 3, 4, 5, 6, 7, 8]) ➞ ["1", "3-8"]
Notes
If there are no numbers consecutive to a number in the list, represent it as only the string version of that number (see example #4).
Return an empty list if the given list is empty.


8. Sherlock considers a string to be valid if all characters of the string appear the same number of times. It is also valid if he can remove just 1 character at 1 index in the string, and the remaining characters will occur the same number of times. Given a string txt, determine if it is valid. If so, return "YES", otherwise return "NO".

For example, If txt = "abc", the string is valid because the frequencies of characters are all the same. If txt = "abcc", the string is also valid, because we can remove 1 "c" and have one of each character remaining in the string. However, if txt = "abccc", the string is not valid, because removing one character does not result in the same frequency of characters.

Examples
is_valid("aabbcd") ➞ "NO"
# We would need to remove two characters, both c and d  -> aabb or a and b -> abcd, to make it valid.
# We are limited to removing only one character, so it is invalid.

is_valid("aabbccddeefghi") ➞ "NO"
# Frequency counts for the letters are as follows:
# {"a": 2, "b": 2, "c": 2, "d": 2, "e": 2, "f": 1, "g": 1, "h": 1, "i": 1}
# There are two ways to make the valid string:
# Remove 4 characters with a frequency of 1: {f, g, h, i}.
# Remove 5 characters of frequency 2: {a, b, c, d, e}.
# Neither of these is an option.

is_valid("abcdefghhgfedecba") ➞ "YES"
# All characters occur twice except for e which occurs 3 times.
# We can delete one instance of e to have a valid string.


9. Given an array of strings and an original string, write a function to output an array of boolean values - True if the word can be formed from the original word by swapping two letters only once and False otherwise.

Examples
validate_swaps(["BACDE", "EBCDA", "BCDEA", "ACBED"], "ABCDE")
➞ [True, True, False, False]

# Swap "A" and "B" from "ABCDE" to get "BACDE".
# Swap "A" and "E" from "ABCDE" to get "EBCDA".
# Both "BCDEA" and "ACBED" cannot be formed from "ABCDE" using only a single swap.

validate_swaps(["32145", "12354", "15342", "12543"], "12345")
➞ [True, True, True, True]

validate_swaps(["9786", "9788", "97865", "7689"], "9768")
➞ [True, False, False, False]

10. Create a function that takes a list of more than three numbers and returns the Least Common Multiple (LCM).

Examples
lcm_of_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 2520

lcm_of_list([13, 6, 17, 18, 19, 20, 37]) ➞ 27965340

lcm_of_list([44, 64, 12, 17, 65]) ➞ 2333760
Notes
The LCM of a list of numbers is the smallest positive number that is divisible by each of the numbers in the list
