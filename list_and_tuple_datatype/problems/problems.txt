Problem 1: write a list comprehension to generate 100 random numbers 
between 1 to 100
Problem 2: Given a list L that contains numbers between 1 and 100,
create a new list whose first element is how many ones are in L, 
whose second element is how many twos are in L, etc.
Problem 3: Flip the elements of each inner list in the given list
[[1,2], [3,4], [5,6]]
Problem 4: points = {'A':1, 'B':3, 'C':3, 'D':2, 'E':1, 'F':4, 'G':2,
          'H':4, 'I':1, 'J':8, 'K':5, 'L':1, 'M':3, 'N':1,
          'O':1, 'P':3, 'Q':10, 'R':1, 'S':1, 'T':1, 'U':1,
          'V':4, 'W':4, 'X':8, 'Y':4, 'Z':10}
          word ="helloworld"
          Find the score of the word by summing up the value for each character.
Problem 5: Write a program to count the frequency of words in given text
Problem 6: Write a list comprehension to select words with only three characters from a given text
Problem 7: given the list [22, 13, 45, 50, 98, 69, 43, 44, 1] write a list comprehension 
           to form a list by adding 5 to numbers less than 45.
Problem 8: Take input from user and convert it to cipher by using substitution cipher.
           Every alphabet is replaced with corresponding alphabet in key.
           alphabet = 'abcdefghijklmnopqrstuvwxyz'
           key = 'xznlwebgjhqdyvtkfuompciasr' 
           if the input has letter 'a' it will be replaced with 'x' and for 'b' it
           will be replaced with 'z' and it goes on
Problem 9: Write a program that asks the user to enter a word and 
determines whether the word is a palindrome or not. 
           A palindrome is a word that reads the same backwards as forwards.
Problem 10: Write a program that asks the user to enter a number and 
            prints out all the divisors of that number
Problem 11: An anagram of a word is a word that is created by 
            rearranging the letters of the original. For instance, 
            two anagrams of idle are deli and lied. 
            Write a program that asks the user for a string and 
            returns a random anagram of the stringâ€”in other words, 
            a random rearrangement of the letters of that string.
Problem 12: A simple way of encrypting a message is to rearrange its characters. 
            One way to rearrange the characters is to pick out the characters at even indices, 
            put them first in the encrypted string, and follow them by the odd characters. 
            For example, the string message would be encrypted as msaeesg because 
            the even characters are m, s, a, e (at indices 0, 2, 4, and 6) and 
            the odd characters are e, s, g (at indices 1, 3, and 5).
            1. Write a program that asks the user for a string and uses this method to encrypt the string.
            2. Write a program that decrypts a string that was encrypted with this method.
Problem 13: Dictionaries provide a convenient way to store structured data. Here is an example dictionary:
            d=[{'name':'Todd', 'phone':'555-1414', 'email':'todd@mail.net'},
            {'name':'Helga', 'phone':'555-1618', 'email':'helga@mail.net'},
            {'name':'Princess', 'phone':'555-3141', 'email':'';},
            {'name':'LJ', 'phone':'555-2718', 'email':'lj@mail.net'}]
            Write a program that reads through any dictionary like this and prints the following:

            1. All the users whose phone number ends in an 8
            2. All the users that don't have an email address listed

Problem 14: days = {'January':31, 'February':28, 'March':31, 'April':30,
        'May':31, 'June':30, 'July':31, 'August':31,
        'September':30, 'October':31, 'November':30, 'December':31}
        For this problem, use the dictionary above
        whose keys are month names and whose values are the number 
        of days in the corresponding months.
        Ask the user to enter a month name and use the dictionary to tell them how many days are in the month.
        Print out all of the keys in alphabetical order.
        Print out all of the months with 31 days.
        Print out the (key-value) pairs sorted by the number of days in each month
        Modify the program from part (a) and the dictionary so that the user does not 
        have to know how to spell the month name exactly. That is, 
        all they have to do is spell the first three letters of the month name correctly.
Problem 15: Write a program that uses a dictionary that contains ten user names and passwords. 
The program should ask the user to enter their username and password. 
If the username is not in the dictionary, the program should 
indicate that the person is not a valid user of the system. 
If the username is in the dictionary, but the user does not enter the right password, 
the program should say that the password is invalid. 
If the password is correct, then the program should tell the user that they are now logged in to the system.

Problem 16: Write a program that gets a string from the user containing a potential telephone number.
The program should print Valid if it decides the phone number is a real phone number, and Invalid otherwise. 
A phone number is considered valid as long as it is written in the form abc-def-hijk or 1-abc-def-hijk. 
The dashes must be included, the phone number should contain only numbers and dashes, 
and the number of digits in each group must be correct. 
